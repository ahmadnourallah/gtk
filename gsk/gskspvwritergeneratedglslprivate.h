/* GTK - The GIMP Toolkit
 *   
 * Copyright Â© 2017 Benjamin Otte <otte@gnome.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * !!! THIS FILE WAS AUTOGENERATED !!!
 * 
 * This file was created using the command
 *   gjs spirv.js Glsl-functions extinst.glsl.std.450.grammar.json
 * Apply any changes to those files and then regenerate using above command.
 */

#include <string.h>

#ifndef __GSK_SPV_SEEN_AUTOGENERATED_FUNCTIONS__
#define __GSK_SPV_SEEN_AUTOGENERATED_FUNCTIONS__
static inline void
append_string (GArray     *bytes,
               const char *str)
{
  gsize len = strlen (str);
  guint size = bytes->len;
  g_array_set_size (bytes, size + len / 4 + 1);
  memcpy (&g_array_index (bytes, guint32, size), str, len);
}
#endif /* __GSK_SPV_SEEN_AUTOGENERATED_FUNCTIONS__ */

static inline guint32
gsk_spv_writer_round (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ROUND });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_round_even (GskSpvWriter *writer,
                           GskSlType *result_type,
                           guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ROUND_EVEN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_trunc (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_TRUNC });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_abs (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_ABS });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_s_abs (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_S_ABS });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_sign (GskSpvWriter *writer,
                       GskSlType *result_type,
                       guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_SIGN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_s_sign (GskSpvWriter *writer,
                       GskSlType *result_type,
                       guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_S_SIGN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_floor (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FLOOR });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_ceil (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_CEIL });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_fract (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FRACT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_radians (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 degrees)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_RADIANS });
  g_array_append_val (bytes, degrees);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_degrees (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 radians)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_DEGREES });
  g_array_append_val (bytes, radians);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_sin (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_SIN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_cos (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_COS });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_tan (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_TAN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_asin (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ASIN });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_acos (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ACOS });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_atan (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 y_over_x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ATAN });
  g_array_append_val (bytes, y_over_x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_sinh (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_SINH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_cosh (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_COSH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_tanh (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_TANH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_asinh (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ASINH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_acosh (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ACOSH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_atanh (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ATANH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_atan2 (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 y,
                      guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_ATAN2 });
  g_array_append_val (bytes, y);
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pow (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x,
                    guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_POW });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_exp (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_EXP });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_log (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_LOG });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_exp2 (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_EXP2 });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_log2 (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_LOG2 });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_sqrt (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_SQRT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_inverse_sqrt (GskSpvWriter *writer,
                             GskSlType *result_type,
                             guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_INVERSE_SQRT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_determinant (GskSpvWriter *writer,
                            GskSlType *result_type,
                            guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_DETERMINANT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_matrix_inverse (GskSpvWriter *writer,
                               GskSlType *result_type,
                               guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_MATRIX_INVERSE });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_modf (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 x,
                     guint32 i)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_MODF });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, i);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_modf_struct (GskSpvWriter *writer,
                            GskSlType *result_type,
                            guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_MODF_STRUCT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_min (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_MIN });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_u_min (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_U_MIN });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_s_min (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_S_MIN });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_max (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_MAX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_u_max (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_U_MAX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_s_max (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_S_MAX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_clamp (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 x,
                        guint32 min_val,
                        guint32 max_val)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_CLAMP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, min_val);
  g_array_append_val (bytes, max_val);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_u_clamp (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 x,
                        guint32 min_val,
                        guint32 max_val)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_U_CLAMP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, min_val);
  g_array_append_val (bytes, max_val);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_s_clamp (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 x,
                        guint32 min_val,
                        guint32 max_val)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_S_CLAMP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, min_val);
  g_array_append_val (bytes, max_val);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_f_mix (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y,
                      guint32 a)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_F_MIX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_append_val (bytes, a);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_i_mix (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y,
                      guint32 a)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_I_MIX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_append_val (bytes, a);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_step (GskSpvWriter *writer,
                     GskSlType *result_type,
                     guint32 edge,
                     guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_STEP });
  g_array_append_val (bytes, edge);
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_smooth_step (GskSpvWriter *writer,
                            GskSlType *result_type,
                            guint32 edge0,
                            guint32 edge1,
                            guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_SMOOTH_STEP });
  g_array_append_val (bytes, edge0);
  g_array_append_val (bytes, edge1);
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_fma (GskSpvWriter *writer,
                    GskSlType *result_type,
                    guint32 a,
                    guint32 b,
                    guint32 c)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FMA });
  g_array_append_val (bytes, a);
  g_array_append_val (bytes, b);
  g_array_append_val (bytes, c);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_frexp (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 exp)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FREXP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, exp);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_frexp_struct (GskSpvWriter *writer,
                             GskSlType *result_type,
                             guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FREXP_STRUCT });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_ldexp (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 exp)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_LDEXP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, exp);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_snorm4x8 (GskSpvWriter *writer,
                              GskSlType *result_type,
                              guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_SNORM4X8 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_unorm4x8 (GskSpvWriter *writer,
                              GskSlType *result_type,
                              guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_UNORM4X8 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_snorm2x16 (GskSpvWriter *writer,
                               GskSlType *result_type,
                               guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_SNORM2X16 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_unorm2x16 (GskSpvWriter *writer,
                               GskSlType *result_type,
                               guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_UNORM2X16 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_half2x16 (GskSpvWriter *writer,
                              GskSlType *result_type,
                              guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_HALF2X16 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_pack_double2x32 (GskSpvWriter *writer,
                                GskSlType *result_type,
                                guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_PACK_DOUBLE2X32 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_snorm2x16 (GskSpvWriter *writer,
                                 GskSlType *result_type,
                                 guint32 p)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_SNORM2X16 });
  g_array_append_val (bytes, p);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_unorm2x16 (GskSpvWriter *writer,
                                 GskSlType *result_type,
                                 guint32 p)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_UNORM2X16 });
  g_array_append_val (bytes, p);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_half2x16 (GskSpvWriter *writer,
                                GskSlType *result_type,
                                guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_HALF2X16 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_snorm4x8 (GskSpvWriter *writer,
                                GskSlType *result_type,
                                guint32 p)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_SNORM4X8 });
  g_array_append_val (bytes, p);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_unorm4x8 (GskSpvWriter *writer,
                                GskSlType *result_type,
                                guint32 p)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_UNORM4X8 });
  g_array_append_val (bytes, p);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_unpack_double2x32 (GskSpvWriter *writer,
                                  GskSlType *result_type,
                                  guint32 v)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_UNPACK_DOUBLE2X32 });
  g_array_append_val (bytes, v);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_length (GskSpvWriter *writer,
                       GskSlType *result_type,
                       guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_LENGTH });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_distance (GskSpvWriter *writer,
                         GskSlType *result_type,
                         guint32 p0,
                         guint32 p1)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_DISTANCE });
  g_array_append_val (bytes, p0);
  g_array_append_val (bytes, p1);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_cross (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_CROSS });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_normalize (GskSpvWriter *writer,
                          GskSlType *result_type,
                          guint32 x)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_NORMALIZE });
  g_array_append_val (bytes, x);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_face_forward (GskSpvWriter *writer,
                             GskSlType *result_type,
                             guint32 n,
                             guint32 i,
                             guint32 nref)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FACE_FORWARD });
  g_array_append_val (bytes, n);
  g_array_append_val (bytes, i);
  g_array_append_val (bytes, nref);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_reflect (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 i,
                        guint32 n)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_REFLECT });
  g_array_append_val (bytes, i);
  g_array_append_val (bytes, n);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_refract (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 i,
                        guint32 n,
                        guint32 eta)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_REFRACT });
  g_array_append_val (bytes, i);
  g_array_append_val (bytes, n);
  g_array_append_val (bytes, eta);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_find_i_lsb (GskSpvWriter *writer,
                           GskSlType *result_type,
                           guint32 value)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FIND_I_LSB });
  g_array_append_val (bytes, value);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_find_s_msb (GskSpvWriter *writer,
                           GskSlType *result_type,
                           guint32 value)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FIND_S_MSB });
  g_array_append_val (bytes, value);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_find_u_msb (GskSpvWriter *writer,
                           GskSlType *result_type,
                           guint32 value)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_FIND_U_MSB });
  g_array_append_val (bytes, value);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_interpolate_at_centroid (GskSpvWriter *writer,
                                        GskSlType *result_type,
                                        guint32 interpolant)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_INTERPOLATE_AT_CENTROID });
  g_array_append_val (bytes, interpolant);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_interpolate_at_sample (GskSpvWriter *writer,
                                      GskSlType *result_type,
                                      guint32 interpolant,
                                      guint32 sample)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_INTERPOLATE_AT_SAMPLE });
  g_array_append_val (bytes, interpolant);
  g_array_append_val (bytes, sample);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_interpolate_at_offset (GskSpvWriter *writer,
                                      GskSlType *result_type,
                                      guint32 interpolant,
                                      guint32 offset)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_INTERPOLATE_AT_OFFSET });
  g_array_append_val (bytes, interpolant);
  g_array_append_val (bytes, offset);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_n_min (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_N_MIN });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_n_max (GskSpvWriter *writer,
                      GskSlType *result_type,
                      guint32 x,
                      guint32 y)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_N_MAX });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, y);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

static inline guint32
gsk_spv_writer_n_clamp (GskSpvWriter *writer,
                        GskSlType *result_type,
                        guint32 x,
                        guint32 min_val,
                        guint32 max_val)
{
  GArray *bytes = gsk_spv_writer_get_bytes (writer, GSK_SPV_WRITER_SECTION_CODE);
  guint32 result_type_id = gsk_spv_writer_get_id_for_type (writer, result_type);
  guint32 result_id = gsk_spv_writer_make_id (writer);
  guint start_index = bytes->len;

  g_array_append_val (bytes, (guint32) { 0 });
  g_array_append_val (bytes, result_type_id);
  g_array_append_val (bytes, result_id);
  g_array_append_val (bytes, (guint32) { gsk_spv_writer_get_id_for_extended_instructions (writer) });
  g_array_append_val (bytes, (guint32) { GSK_SPV_OP_GLSL_N_CLAMP });
  g_array_append_val (bytes, x);
  g_array_append_val (bytes, min_val);
  g_array_append_val (bytes, max_val);
  g_array_index (bytes, guint32, start_index) = (bytes->len - start_index) << 16 | GSK_SPV_OP_EXT_INST;

  return result_id;
}

